
let apiKey = ''

const BASE_URL = 'https://api.nal.usda.gov/fdc/v1/'
const FOOD_SEARCH = BASE_URL + 'foods/search?'
const get_food_details_uri = (id: string) => BASE_URL + `food/${id}`;

export const USDAKeywordSearch = async (keyword: string, pageNumber=1, pageSize=25, sortBy='publishedDate', sortOrder='asc'): Promise<USDASearchResult> => {
    let params = {
        api_key: apiKey,
        query: `description:"${keyword}" commonNames:"${keyword}"`,
        dataType: 'Branded,Foundation',
        pageSize:pageSize.toFixed(),
        pageNumber: pageNumber.toFixed(),
        sortBy: sortBy,
        sortOrder: sortOrder
    }
    let url = new URL(FOOD_SEARCH)
    url.search = new URLSearchParams(params).toString()
    let result = await fetch(url, {
        headers: {
            'accept': 'application/json'
        }
    })
    let json = await result.json()
    return json as USDASearchResult
}

export const USDAFoodDetails = async (id: string): Promise<USDABrandedFood | USDAFoundationFoodItem | null> => {
    let url = new URL(get_food_details_uri(id))
    let params = {
        api_key: apiKey
    }
    url.search = new URLSearchParams(params).toString()
    let result = await fetch(url, {
        headers: {
            'accept': 'application/json'
        }
    })
    let json = await result.json()
    return json;
}


type USDASearchType = 'Branded' | 'Foundation' | 'Survey (FNDDS)' | 'SR Legacy';
export interface USDASearchResult {
    totalHits: number,
    currentPage: number;
    totalPages: number;
    pageList: number[];
    foodSearchCriteria: {
        dataType: USDASearchType[];
        query: string;
        generalSearchInput: string;
        pageNumber: number;
        sortBy: string;
        sortOrder: string;
        numberOfResultsPerPage: number;
        pageSize: number;
        requireAllWords: boolean;
        foodTypes: USDASearchType[]
    };
    foods: USDASearchResultFood[]
}


interface USDANutritionType {
    nutrientId: number;
    nutrientName: string;
    nutrientNumber: string;
    unitName: string;
    derivationCode: string;
    derivationDescription: string;
    derivationId: number;
    value: number;
    foodNutrientSourceId: number;
    foodNutrientSourceCode: string;
    foodNutrientSourceDescription: string;
    rank: number;
    indentLevel: number;
    foodNutrientId: number;
    percentDailyValue: number;
}


interface USDAFoodPortion {
    id: number;
    amount: number;
    dataPoints: number;
    gramWeight: number;
    minYearAcquired: number;
    modifier: string;
    portionDescription: string;
    sequenceNumber: number;
    measureUnit: USDAMeasureUnit
}


interface USDAMeasureUnit {
    id: number; abbreviation: string; name: string
}


interface USDASampleFood {
    fdcId: number;
    description: string;
    dataType: USDASearchType;
    foodClass?: string;
    publicationDate: string;
    foodAttributes: USDAFoodCategory[]
}


interface USDAAbridgedFood {
    fdcId: number;
    description: string;
    dataType: USDASearchType;
    foodNutrients: USDANutritionType[]
    publicationDate: string;
    brandOwner?: string;
    gtinUpc?: string;
    ndbNumber?: number;
    foodCode?: string;
}

interface USDASearchResultFood extends USDAAbridgedFood {
    scientificName?: string;
    ingredients?: string;
    additionalDescriptions: string;
    allHighlightFields: string;
    score: number
    commonNames: string;
    foodCategory: string;
    brandName?: string;
}

interface USDABrandedFood extends USDAAbridgedFood {
    availableDate: string;
    brandOwner: string;
    dataSource: string;
    dataType: 'Branded'
    gtinUpc: string;
    householdServingFullText: string;
    ingredients: string;
    modifiedDate: string;
    servingSize: number;
    servingSizeUnit: string;
    preparationStateCode: string;
    brandedFoodCategory: string;
    tradeChannel: string[];
    gpcClassCode: string;
    labelNutrients: USDALabelNutrients
}

interface USDALabelNutrients {
    fat: USDALabelNutrientObject 
    saturatedFat: USDALabelNutrientObject
    transFat: USDALabelNutrientObject
    cholesterol: USDALabelNutrientObject
    sodium: USDALabelNutrientObject
    carbohydrates: USDALabelNutrientObject
    fiber: USDALabelNutrientObject
    sugars: USDALabelNutrientObject
    protein: USDALabelNutrientObject
    calcium: USDALabelNutrientObject
    iron: USDALabelNutrientObject
    potassium: USDALabelNutrientObject
    calories: USDALabelNutrientObject
}

interface USDALabelNutrientObject {
    value: number
}

interface USDAFoundationFoodItem extends USDAAbridgedFood{
    dataType: 'Foundation'
    foodClass: string;
    footNote: string;
    isHistoricalReference: boolean;
    scientificName: string;
    foodCategory: USDAFoodCategory;
    foodComponents: USDAFoodComponent[];
    foodPortions: USDAFoodPortion[]
    inputFoods: USDAInputFoodFoundation[];
    nutrientConversionFactors: USDANutrientConversionFactors[]
}


interface USDAInputFoodFoundation {
    id: number; foodDescription: string; inputFood: USDASampleFood
}

interface USDANutrientConversionFactors {
    type: string; value: number;
}


interface USDAFoodCategory {
    id: number; code: string; description: string;
}

interface USDAFoodComponent {
    id: number;
    name: string;
    dataPoints: number;
    gramWeight: number;
    isRefuse: boolean;
    minYearAcquired: number;
    percentWeight: number;
}



export const USDAFoodCategories = {
    'Dairy and Egg Products': 'ü•õ',
    'Spices and Herbs': 'üßÇ',
    'Baby Foods': 'üçº',
    'Fats and Oils': 'üßà',
    'Poultry Products': 'üçó',
    'Soups, Sauces, and Gravies': 'üçú',
    'Sausages and Luncheon Meats': 'ü•ì',
    'Breakfast Cereals': 'ü•£',
    'Fruits and Fruit Juices': 'üçä',
    'Pork Products': 'üêñ',
    'Vegetables and Vegetable Products': 'ü•¶',
    'Nut and Seed Products': 'ü•ú',
    'Beef Products': 'ü•©',
    'Beverages': 'üßÉ',
    'Finfish and Shellfish Products': 'üç§',
    'Legumes and Legume Products': 'ü´ò',
    'Lamb, Veal, and Game Products': 'üçñ',
    'Baked Products': 'üéÇ',
    'Sweets': 'üç∞',
    'Cereal Grains and Pasta': 'üçù',
    'Fast Foods': 'üçï',
    'Meals, Entrees, and Side Dishes': 'üå≠',
    'Snacks': 'üç™',
    'Restaurant Foods': 'üë©‚Äçüç≥',
    'Branded Food Products Database': 'üõí',
    'Alcoholic Beverages': 'üç∑'
}

const ExpandedUSDAFoodCategories = {
    ...USDAFoodCategories,
    'Oriental, Mexican & Ethnic Sauces': "ü•´",
    'FAST_FOOD': 'üçü',
    'Herbs & Spices' : 'üßÇ',
    "Pre-Packaged Fruit & Vegetables": 'üçè',
    'Soda' : 'ü•§',
    'Jam, Jelly & Fruit Spreads': 'üçØ',
    'Pickles, Olives, Peppers & Relishes' : "ü•í",
    'Water' : 'üíß',
    'Baking Additives & Extracts': 'üç¶',
    'Seasoning Mixes, Salts, Marinades & Tenderizers' : "üßÇ",
    'Ketchup, Mustard, BBQ & Cheese Sauce' : 'ü•´',
    'Vegetable and Lentil Mixes' : 'ü•ó',
    'Cereal' : 'ü•£',
    'Croissants, Sweet Rolls, Muffins & Other Pastries': 'ü•ê',
    'Other Snacks' : "üçø",
    'Mexican Dinner Mixes' : 'üåÆ',
    'Popcorn, Peanuts, Seeds & Related Snacks' : "üçø",
    'Chips, Pretzels & Snacks' : "ü•®",
    'Canned Meat': 'ü•ì',
    'Other Meats' : 'ü•ì',
    'Other Deli' : 'ü•ì',
    'Breads & Buns': 'üçû',
    'Flours & Corn Meal' : 'üçû',
    'Ice Cream & Frozen Yogurt' : 'üç®',
    'Crackers & Biscotti' : "üç™",
    'Baking Decorations & Dessert Toppings' : "üç®",
    'Rice' : 'üçö',
    'Pizza Mixes & Other Dry Dinners' : 'üçï',
    'Entrees, Sides & Small Meals' : 'üç±',
    'Snack, Energy & Granola Bars' : 'üç´',
    'Pasta by Shape & Type' : 'üçù',
    'Prepared Pasta & Pizza Sauces' : 'üçù',
    'Pasta Dinners' : 'üçù',
    'Canned Fruit' : 'üçå',
    'Other Cooking Sauces' : "ü•´",
    'Liquid Water Enhancer' : 'üí¶',
    'Salad Dressing & Mayonnaise' : "üßà",
    'Yogurt' : 'üç¶',
    'Confectionery Products': 'üç°'
}

export const getEmojiByCategory = (category: string | null|undefined): string => {
    //@ts-ignore
    return ExpandedUSDAFoodCategories[category] || 'üçé'
}